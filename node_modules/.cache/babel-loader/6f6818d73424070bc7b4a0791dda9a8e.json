{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User01\\\\Desktop\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\User01\\\\Desktop\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\User01\\\\Desktop\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\User01\\\\Desktop\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\User01\\\\Desktop\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\User01\\\\Desktop\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\User01\\\\Desktop\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User01\\\\Desktop\\\\lights-out\\\\src\\\\components\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"../css/Board.css\";\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\r\n *\r\n * State:\r\n *\r\n * - hasWon: boolean, true when board is all off\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = Array.from({\n        length: nrows\n      }, function () {\n        return Array.from({\n          length: ncols\n        }, function () {\n          return false;\n        });\n      });\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: create array-of-arrays of true/false values\n\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n          flipCell(y, x - 1);\n          flipCell(y, x + 1);\n          flipCell(y + 1, x);\n          flipCell(y - 1, x);\n        }\n\n        board[y] = row;\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props2 = this.props,\n          ncols = _this$props2.ncols,\n          nrows = _this$props2.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1);\n      flipCell(y + 1, x);\n      flipCell(y - 1, x); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.hasWon) {\n        return React.createElement(\"div\", {\n          className: \"Board-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"winner\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"neon-orange\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, \"YOU\"), React.createElement(\"span\", {\n          className: \"neon-blue\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, \"WIN!\")));\n      }\n\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push(React.createElement(Cell, {\n            key: coord,\n            coord: coord,\n            isLit: this.state.board[y][x],\n            flipCellsAroundMe: this.flipCellsAround,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }));\n        }\n\n        tblBoard.push(React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, row));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Board-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"neon-orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"Lights\"), React.createElement(\"div\", {\n        className: \"neon-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Out\")), React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, tblBoard)));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  chanceLightStartsOn: 0.25,\n  nrows: 5,\n  ncols: 5\n};\nexport default Board;","map":{"version":3,"sources":["C:\\Users\\User01\\Desktop\\lights-out\\src\\components\\Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","flipCellsAround","bind","ncols","nrows","Array","from","length","flipCell","y","x","row","push","Math","random","chanceLightStartsOn","coord","split","map","Number","every","cell","setState","tblBoard","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport \"../css/Board.css\";\r\n\r\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\r\n *\r\n * State:\r\n *\r\n * - hasWon: boolean, true when board is all off\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\r\n\r\nclass Board extends Component {\r\n  static defaultProps = {\r\n    chanceLightStartsOn: 0.25,\r\n    nrows: 5,\r\n    ncols: 5\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // TODO: set initial state\r\n    this.state = { hasWon: false, board: this.createBoard() };\r\n\r\n    this.flipCellsAround = this.flipCellsAround.bind(this);\r\n  }\r\n\r\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\r\n  createBoard() {\r\n    let { ncols, nrows } = this.props;\r\n\r\n    let board = Array.from({ length: nrows }, () =>\r\n      Array.from({ length: ncols }, () => false)\r\n    );\r\n\r\n    function flipCell(y, x) {\r\n      // if this coord is actually on board, flip it\r\n\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n    }\r\n\r\n    // TODO: create array-of-arrays of true/false values\r\n    for (let y = 0; y < this.props.nrows; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < this.props.ncols; x++) {\r\n        row.push(Math.random() < this.props.chanceLightStartsOn);\r\n        flipCell(y, x - 1);\r\n        flipCell(y, x + 1);\r\n        flipCell(y + 1, x);\r\n        flipCell(y - 1, x);\r\n      }\r\n      board[y] = row;\r\n    }\r\n    return board;\r\n  }\r\n\r\n  /** handle changing a cell: update board & determine if winner */\r\n  flipCellsAround(coord) {\r\n    let { ncols, nrows } = this.props;\r\n    let board = this.state.board;\r\n    let [y, x] = coord.split(\"-\").map(Number);\r\n\r\n    function flipCell(y, x) {\r\n      // if this coord is actually on board, flip it\r\n\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n    }\r\n\r\n    flipCell(y, x);\r\n    flipCell(y, x - 1);\r\n    flipCell(y, x + 1);\r\n    flipCell(y + 1, x);\r\n    flipCell(y - 1, x);\r\n\r\n    // TODO: flip this cell and the cells around it\r\n\r\n    // win when every cell is turned off\r\n    // TODO: determine is the game has been won\r\n    let hasWon = board.every(row => row.every(cell => !cell));\r\n\r\n    this.setState({ board, hasWon });\r\n  }\r\n\r\n  /** Render game board or winning message. */\r\n  render() {\r\n    if (this.state.hasWon) {\r\n      return (\r\n        <div className=\"Board-title\">\r\n          <div className=\"winner\">\r\n            <span className=\"neon-orange\">YOU</span>\r\n            <span className=\"neon-blue\">WIN!</span>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let tblBoard = [];\r\n\r\n    for (let y = 0; y < this.props.nrows; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < this.props.ncols; x++) {\r\n        let coord = `${y}-${x}`;\r\n        row.push(\r\n          <Cell\r\n            key={coord}\r\n            coord={coord}\r\n            isLit={this.state.board[y][x]}\r\n            flipCellsAroundMe={this.flipCellsAround}\r\n          />\r\n        );\r\n      }\r\n      tblBoard.push(<tr key={y}>{row}</tr>);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"Board-title\">\r\n          <div className=\"neon-orange\">Lights</div>\r\n          <div className=\"neon-blue\">Out</div>\r\n        </div>\r\n\r\n        <table className=\"Board\">\r\n          <tbody>{tblBoard}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}